
    string dna_name, dna_s, dna_w, dna_w1;
    // window_list wl;

    dna_bitset db(PointerListLen);
    // std::cout << to_string(to_bit("AACTAATTGGT")) << std::endl;

    uint64_t dna_ref_b = 0;
    size_t  index_s = 0, index_w = 0;
    uint64_t dna_ref_index = 0;
    bool no_window1 = false;

// ofstream outf;
    // outf.open("out2");
    // outf << dna_name  << endl;
    // while (inf >> dna_s) 
    // {
    //     index_s = 0;
    //     while (index_s < dna_s.size())
    //     {
    //         size_t len = min(dna_s.size()-index_s, WindowListLen-index_w);
    //         dna_w.append(dna_s, index_s, len);
    //         index_s += len;
    //         index_w += len;
    //         if (index_w == WindowListLen) 
    //         {
    //             if (no_window1)
    //             {
    //                 dna_w1.append(dna_w, 0, index_w/2);
    //                 outf << dna_w1 << " " <<  dna_ref_index << "| \n";
                
    //                 for (size_t i=0; i <= index_w - PointerListLen; ++i) 
    //                 {
    //                     db.link_string(dna_w1.substr(i, PointerListLen), dna_ref_index);
    //                 }
    //                 ++dna_ref_index;
    //                 dna_w1 = dna_w.substr(index_w/2, index_w/2);
    //                 // dna_w1.erase(0, dna_w1.size());
    //             }
    //             else
    //             {
    //                 dna_w1.append(dna_w, index_w/2, index_w/2);
    //                 no_window1 = true;
    //             }
    //             //get a full window in dna_w stringcom
    //             outf << dna_w << " " <<  dna_ref_index << "| \n";
                
    //             for (size_t i=0; i <= index_w - PointerListLen; ++i) 
    //             {
    //                 db.link_string(dna_w.substr(i, PointerListLen), dna_ref_index);
    //             }

    //             ++dna_ref_index;
    //             dna_w.erase(0, dna_w.size());
    //             index_w = 0;
    //         }
    //     }
    // }
    // if (index_w != 0) 
    // {
    //     //this is the last window7627
    //     // outf << dna_w << " " <<  dna_ref_index << "| \n";

    //     dna_w1.append(dna_w, 0, min(WindowListLen/2, index_w));
    //     outf << dna_w1 << " " <<  dna_ref_index << "| \n";
    
    //     for (size_t i=0; i <= WindowListLen/2+min(WindowListLen/2, index_w) - PointerListLen; ++i) 
    //     {
    //         db.link_string(dna_w1.substr(i, PointerListLen), dna_ref_index);
    //     }
    //     ++dna_ref_index;

    //     if (index_w > PointerListLen)
    //     {
    //         outf << dna_w << " " <<  dna_ref_index << "| \n";
                    
    //         for (size_t i=0; i <= index_w - PointerListLen; ++i) 
    //         {
    //             db.link_string(dna_w.substr(i, PointerListLen), dna_ref_index);
    //         }

    //         ++dna_ref_index;  
    //     }
    //     // dna_w1 = dna_w.substr(index_w/2, index_w/2);
    //     dna_w1.erase(0, dna_w1.size());
    //     dna_w.erase(0, dna_w.size());
    //     index_w = 0;
    // }


















#include <iostream>
#include <fstream>
#include <cstdio>
#include <string>
#include <queue>
#include <unistd.h>
#include <stdint.h>
#include "RHT.h"
using namespace std;

#define PRINT_WINDOW_INDEX

int main(int argc, char** argv) 
{

    //receive PointerListLength and windowListLength,default 11 and 2024
    int c;
    opterr = 0;
    while ((c = getopt (argc, argv, "p:w:")) != -1) 
    {
        switch (c)
        {
            case 'p':
                if (optarg)
                    PointerListLen = atol(optarg);
                break;
            case 'w':
                if (optarg)
                    WindowListLen = atol(optarg);
                break;
            default:
                abort ();
        }
    }
    // std::cout << PointerListLen << " " << WindowListLen << "\n";

    ifstream inf;
    inf.open("GCF_000005845.2_ASM584v2_genomic.fna");
    

    FILE *pout;
    pout = fopen("out_RHT", "w");
    

    string dna_name, dna_s, dna_w, dna_w1;
    // window_list wl;

    dna_bitset db(PointerListLen);
    // std::cout << to_string(to_bit("AACTAATTGGT")) << std::endl;

    uint64_t dna_ref_b = 0;
    size_t  index_s = 0, index_w = 0;
    uint64_t dna_ref_index = 0;
    bool no_window1 = false;


    getline(inf, dna_name);
    cout << dna_name  << endl;

    #ifdef PRINT_WINDOW_INDEX
        ofstream outf;
        outf.open("out_window");
    #endif

    // SCANF_WINDOW
    while (inf >> dna_s)
    {
        index_s = 0;
        while (index_s < dna_s.size()) 
        {
            ++dna_ref_b;
            dna_w.append(dna_s, index_s++, 1);
            if (dna_ref_b >= PointerListLen)
            {
                db.link_string(dna_w.substr(dna_w.size() - PointerListLen, PointerListLen), (dna_ref_b / WindowListLen) * 2);
                if (dna_ref_b >= WindowListLen / 2 + PointerListLen) 
                {
                    db.link_string(dna_w.substr(dna_w.size() - PointerListLen, PointerListLen), 2 * ((dna_ref_b - WindowListLen / 2 ) / WindowListLen) + 1);
                }
            }

            #ifdef PRINT_WINDOW_INDEX
                if (dna_ref_b >= WindowListLen)
                    if (dna_ref_b % (WindowListLen / 2) == 0)
                        if (dna_ref_b % (WindowListLen) == 0)
                            outf << dna_w.substr(dna_w.size() - WindowListLen, WindowListLen) << " " <<  (dna_ref_b / WindowListLen) * 2 - 2<< "| \n";
                        else
                            outf << dna_w.substr(dna_w.size() - WindowListLen, WindowListLen) << " " <<  2 * ((dna_ref_b - WindowListLen / 2 ) / WindowListLen) - 1<< "| \n";
            #endif
        }

        #ifndef PRINT_WINDOW_INDEX
        if (dna_w.size() > 2 * WindowListLen) dna_w = dna_w.substr(dna_w.size()-PointerListLen*2, PointerListLen*2);
        #endif

        #ifdef PRINT_WINDOW_INDEX
        if (dna_w.size() > 5 * WindowListLen) dna_w = dna_w.substr(dna_w.size()-WindowListLen, WindowListLen);
        #endif
    }

    #ifdef PRINT_WINDOW_INDEX
        if (dna_ref_b % WindowListLen != 0)
        if (dna_ref_b % WindowListLen >= WindowListLen / 2) 
        {
            outf << dna_w.substr(dna_w.size() - dna_ref_b % WindowListLen, dna_ref_b % WindowListLen) << " " <<  (dna_ref_b / WindowListLen) * 2 << "| \n";
            outf << dna_w.substr(dna_w.size() - dna_ref_b % WindowListLen + WindowListLen / 2, dna_ref_b % WindowListLen - WindowListLen / 2) << " " <<  2 * ((dna_ref_b - WindowListLen / 2 ) / WindowListLen) + 1<< "| \n";
        }
        else
        {
            outf << dna_w.substr(dna_w.size() - dna_ref_b % WindowListLen - WindowListLen / 2, dna_ref_b % WindowListLen + WindowListLen / 2) << " " <<  2 * ((dna_ref_b - WindowListLen / 2 ) / WindowListLen) + 1<< "| \n";
            outf << dna_w.substr(dna_w.size() - dna_ref_b % WindowListLen, dna_ref_b % WindowListLen) << " " <<  (dna_ref_b / WindowListLen) * 2 << "| \n";
        }
    #endif

    db.write_hash_out(pout);

    return 0;
    
}

